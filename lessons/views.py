import openai
from openai import OpenAI
from django.views.decorators.csrf import csrf_exempt
from django.shortcuts import render, get_object_or_404, redirect
from django.utils import timezone
from .models import Lesson, QuizQuestion, QuizAttempt, Explanation, Lead
from django.http import JsonResponse
from django.conf import settings
from django.contrib.auth.decorators import login_required
from django.urls import reverse
import random
import os
import glob
import uuid
import re


def lesson_list(request):
    if request.user.is_authenticated:
        user_id = str(request.user.id)
        passed_lessons = list(
            QuizAttempt.objects.filter(user_id=user_id, is_passed=True)
            .values_list("lesson_id", flat=True)
        )
        if not passed_lessons:
            passed_lessons = [0]
    else:
        passed_lessons = request.session.get('passed_lessons', [0])

    if not passed_lessons:
        passed_lessons = [0]

    max_passed = max(passed_lessons)
    base_unlocked = [1, 251]
    # –ï–∫—ñ –±”©–ª–µ–∫ –º–∞–∫—Å–∏–º–∞–ª–¥—ã ”©—Ç–∫–µ–Ω —Å–∞–±–∞“õ—Ç–∞—Ä–¥—ã —Ç–∞–±—É
    max_kz = max([x for x in passed_lessons if x < 251], default=0)
    max_ru = max([x for x in passed_lessons if x >= 251], default=0)

    # “ö–∞–∑–∞“õ—à–∞ –∂”ô–Ω–µ –æ—Ä—ã—Å—à–∞ unlocked —Ç—ñ–∑—ñ–º–¥–µ—Ä
    unlocked_kz = list(range(1, max_kz + 2)) if max_kz else []
    unlocked_ru = list(range(251, max_ru + 2)) if max_ru else []

    # –ñ–∞–ª–ø—ã unlocked
    unlocked_lessons = sorted(set(base_unlocked + unlocked_kz + unlocked_ru))

    # –°–µ—Å—Å–∏—è“ì–∞ —Å–∞“õ—Ç–∞—É (–≥–æ—Å—Ç—å “Ø—à—ñ–Ω)
    request.session['passed_lessons'] = unlocked_lessons
    request.session.save()

    lessons = Lesson.objects.all().order_by('id')

    stages = [
        {'title': 'Beginner', 'lessons': lessons[0:50]},
        {'title': 'Elementary', 'lessons': lessons[50:100]},
        {'title': 'Pre-Intermediate', 'lessons': lessons[100:150]},
        {'title': 'Intermediate', 'lessons': lessons[150:200]},
        {'title': 'Upper-Intermediate', 'lessons': lessons[200:250]},
        # {'title': 'Beginner (ru)', 'lessons': lessons[250:300]},
        # {'title': 'Elementary (ru)', 'lessons': lessons[300:350]},
        # {'title': 'Pre-Intermediate (ru)', 'lessons': lessons[350:400]},
        # {'title': 'Intermediate (ru)', 'lessons': lessons[400:450]},
        # {'title': 'Upper-Intermediate (ru)', 'lessons': lessons[450:500]},
    ]

    # –ü—Ä–æ–≥—Ä–µ—Å—Å
    for stage in stages:
        total = len(stage['lessons'])
        passed = sum(1 for l in stage['lessons'] if l.id in passed_lessons)
        stage['progress'] = {
            'total': total,
            'passed': passed,
            'percentage': int((passed / total) * 100) if total > 0 else 0
        }

    return render(request, "lessons/lesson_list.html", {
        "stages": stages,
        "passed_lessons": unlocked_lessons,
        "is_guest": not request.user.is_authenticated
    })


def lesson_detail(request, lesson_id):
    lesson = get_object_or_404(Lesson, id=lesson_id)

    # Free lessons that are available to everyone
    free_lesson_ids = {1, 2, 3, 251, 252, 253}


    # Redirect to advertisement if not free and user is unauthenticated
    if lesson.id not in free_lesson_ids and not request.user.is_authenticated:
        return redirect('/advertisement/')

    # “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ ”©—Ç—É “õ“±“õ—ã“ì—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
    if lesson.id not in free_lesson_ids and request.user.is_authenticated:
        passed_lessons = request.session.get('passed_lessons', [])

        if lesson.id not in passed_lessons:
            return redirect('lesson_list')

    # üî• –°–∞–±–∞“õ—Ç—ã“£ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ–ª–µ—Ä—ñ–Ω —Å–µ—Å—Å–∏—è–¥–∞–Ω –∞–ª—É
    explanations_qs = Explanation.objects.filter(lesson=lesson)
    explanations = {
        exp.section: {"text": exp.text, "audio_url": exp.audio_url}
        for exp in explanations_qs
    }

    return render(request, 'lessons/lesson_detail.html', {
        'lesson': lesson,
        'explanations': explanations,
    })


def advertisement(request):
    """
    –ë“±–ª –±–µ—Ç—Ç–µ –æ“õ—É—à—ã“ì–∞ –º–∞“£—ã–∑–¥—ã –∞“õ–ø–∞—Ä–∞—Ç –ø–µ–Ω –∂–∞—Ä–Ω–∞–º–∞ –∫”©—Ä—Å–µ—Ç—ñ–ª–µ–¥—ñ:
      - –û“õ—É –∞“õ—ã—Å—ã: 5000 —Ç–µ“£–≥–µ, 1 –∂—ã–ª“ì–∞
      - ”®—Ç–µ –ø–∞–π–¥–∞–ª—ã —Å–∞–±–∞“õ—Ç–∞—Ä, –∞“ì—ã–ª—à—ã–Ω –º“±“ì–∞–ª—ñ–º–¥–µ—Ä—ñ –º–µ–Ω –∞“õ—ã–ª–¥—ã –∂–∞—Å–∞–Ω–¥—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∞—Ä“õ—ã–ª—ã
      - WhatsApp —Å—ñ–ª—Ç–µ–º–µ—Å—ñ: 87781029394
    """
    return render(request, 'lessons/advertisement.html', {
        'price': '5000 —Ç–µ“£–≥–µ',
        'duration': '1 –∂—ã–ª“ì–∞',
        'whatsapp': '77781029394',
        'message': '”®—Ç–µ –ø–∞–π–¥–∞–ª—ã! –ê“ì—ã–ª—à—ã–Ω –º“±“ì–∞–ª—ñ–º–¥–µ—Ä—ñ –º–µ–Ω –∞“õ—ã–ª–¥—ã –∂–∞—Å–∞–Ω–¥—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∞—Ä“õ—ã–ª—ã “Ø–π—Ä–µ—Ç–µ–º—ñ–∑.'
    })


def explain_section(request, lesson_id):
    """
    AJAX endpoint: generates text and audio explanation for a given section,
    saves it in the session (keyed by lesson ID), and returns JSON.
    """
    if request.method == "POST":
        if not request.user.is_superuser:
            return JsonResponse({'error': '–†“±“õ—Å–∞—Ç –∂–æ“õ'}, status=403)

        section = request.POST.get("section")
        lesson = get_object_or_404(Lesson, id=lesson_id)

        # Build the prompt based on the requested section.
        if section == "content":
            prompt = (
                f"""–¢—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –º–∞—Ç–µ—Ä–∏–∞–ª —É—Ä–æ–∫–∞
            (American English) ‚Äî –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤ –æ—Ç 12 –ª–µ—Ç, —É—Ä–æ–≤–Ω—è –æ—Ç 0 –¥–æ B2:

            –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞:
            {lesson.content}

            –û–±—ä—è—Å–Ω–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –µ–≥–æ –±—ã–ª–æ —É–¥–æ–±–Ω–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª:

            - –°–Ω–∞—á–∞–ª–∞ —á—ë—Ç–∫–æ –∏ —è—Å–Ω–æ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.
            - –ó–∞—Ç–µ–º –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.
            - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ –≤–∏–¥–µ —Ü–∏—Ñ—Ä. –ù–µ –Ω—É–∂–Ω–æ –Ω—É–º–µ—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
            - –í—ã–¥–µ–ª–∏ —Å–ª–æ–∂–Ω—ã–µ –∏–ª–∏ –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ –æ–±—ä—è—Å–Ω–∏ –∏—Ö –∫—Ä–∞—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
            - –ù–µ —Å–æ–∫—Ä–∞—â–∞–π —Å–ª–æ–≤–∞, –ø—Ä–æ–∏–∑–Ω–æ—Å–∏ –∏—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —Ç—Ä—É–¥–Ω—ã–µ –º–µ—Å—Ç–∞.
            - –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
            - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–≤—ë–∑–¥–æ—á–∫–∏ (**) –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–≤. –ü–∏—à–∏ –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
            - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫, –∏–∑–±–µ–≥–∞–π –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑. –≠—Ç–æ –æ–±–ª–µ–≥—á–∏—Ç –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.

            –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –ª–µ–≥–∫–æ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ –∏ –≥–æ—Ç–æ–≤—ã–º –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç.
            """
            )

        elif section == "vocabulary":
            prompt = (
                f"""–¢—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (American English). –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ª–æ–≤–∞—Ä—å,
            –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤ —Å—Ç–∞—Ä—à–µ 12 –ª–µ—Ç, —Å —É—Ä–æ–≤–Ω–µ–º –æ—Ç 0 –¥–æ B2:

            –°–ª–æ–≤–∞—Ä—å —É—Ä–æ–∫–∞:
            {lesson.vocabulary}

            –û–±—ä—è—Å–Ω–∏ —ç—Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å —Ç–∞–∫, —á—Ç–æ–±—ã –µ–≥–æ –±—ã–ª–æ —É–¥–æ–±–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ —Å–ª–µ–¥—É–π —ç—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:

            - –°–Ω–∞—á–∞–ª–∞ —á—ë—Ç–∫–æ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ, –∑–∞—Ç–µ–º —Å—Ä–∞–∑—É –¥–∞–π –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –∑–∞–∫–∞–Ω—á–∏–≤–∞—è —Ç–æ—á–∫–æ–π.
            - –ó–∞—Ç–µ–º –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –æ–±—ä—è—Å–Ω–∏ —ç—Ç–æ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏.
            - –ü—Ä–∏–≤–µ–¥–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–µ–≥–æ ‚Äî –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π.
            - –ï—Å–ª–∏ —Å–ª–æ–≤–æ –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π, –æ–ø–∏—à–∏ –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–æ—Ä–æ—Ç–∫–∏–º —Ä—É—Å—Å–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.
            –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–æ "Example" –ø—Ä–∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤. –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Å–ª–æ–≤–∞ "Example".

            –í–∞–∂–Ω–æ:
            - –ü–æ—Å–ª–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –¥–µ–ª–∞–π –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.
            - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ —Å–ª–æ–≤.
            - –ö–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π —Ç–æ—á–∫–æ–π.
            - –î–∞–∂–µ –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å—Ç–∞–≤—å —Ç–æ—á–∫—É. –ü—Ä–∏–º–µ—Ä: Is this your book?.
            - –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –Ω–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
            - –ò—Å–ø–æ–ª—å–∑—É–π –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é –∏ –ª–µ–∫—Å–∏–∫—É American English.
            - –ù–µ —Å–æ–∫—Ä–∞—â–∞–π —Å–ª–æ–≤–∞ –∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —á–∞—Å—Ç–∏ ‚Äî –≥–æ–≤–æ—Ä–∏ —á—ë—Ç–∫–æ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é.
            - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–≤—ë–∑–¥–æ—á–∫–∏ (**) –∏–ª–∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.
            - –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, —Ç–æ—á–Ω—ã–º –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è.
            """
            )


        elif section == "grammar":
            prompt = (
                f"""–¢—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–µ –Ω–∏–∂–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ
            (American English) –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤ –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ –æ—Ç 12 –ª–µ—Ç –∏ —Å —É—Ä–æ–≤–Ω–µ–º –æ—Ç 0 –¥–æ B2:

            –ì—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ —É—Ä–æ–∫–∞:
            {lesson.grammar}

            –û–±—ä—è—Å–Ω–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É —Ç–∞–∫, —á—Ç–æ–±—ã –µ—ë –±—ã–ª–æ —É–¥–æ–±–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç:

            - –û–±—ä—è—Å–Ω–∏ –ø—Ä–∞–≤–∏–ª–æ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º. –ò–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.
            - –ü—Ä–∏–≤–µ–¥–∏ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞. –ù–∞–ø–∏—à–∏ –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ–≤–µ–¥–∏ –∏—Ö –Ω–∞ —Ä—É—Å—Å–∫–∏–π.
            - –û–±—Ä–∞—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ø—É—Å–∫–∞—é—Ç —É—á–µ–Ω–∏–∫–∏. –ü—Ä–∏–≤–µ–¥–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º.
            - –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è ‚Äî —É–ø–æ–º—è–Ω–∏ –∏—Ö –∫—Ä–∞—Ç–∫–æ.

            –í–∞–∂–Ω–æ:
            - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ü–∏—Ñ—Ä—ã –¥–ª—è –ø–æ—Ä—è–¥–∫–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∏—à–∏ ¬´–≤–æ-–ø–µ—Ä–≤—ã—Ö¬ª, ¬´–≤–æ-–≤—Ç–æ—Ä—ã—Ö¬ª —Å–ª–æ–≤–∞–º–∏).
            - –ù–µ —Å–æ–∫—Ä–∞—â–∞–π –∏ –Ω–µ —É–ø—Ä–æ—â–∞–π —Å–ª–æ–≤–∞ ‚Äî –ø—Ä–æ–∏–∑–Ω–æ—Å–∏ —á—ë—Ç–∫–æ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é.
            - –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –Ω–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
            - –ü–∏—à–∏ –≤ –≤–∏–¥–µ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–≤—ë–∑–¥–æ—á–∫–∏ (**) –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è.
            - –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º, —á—ë—Ç–∫–∏–º –∏ –ª–µ–≥–∫–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º—ã–º –≤ –∞—É–¥–∏–æ.
            """
            )


        elif section == "dialogue":
            prompt = (
                f"""–¢—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. –°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ (American English)
            –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤ –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ –æ—Ç 12 –ª–µ—Ç –∏ —Å —É—Ä–æ–≤–Ω–µ–º –æ—Ç 0 –¥–æ B2:

            –î–∏–∞–ª–æ–≥ —É—Ä–æ–∫–∞:
            {lesson.dialogue}

            –û–±—ä—è—Å–Ω–∏ –¥–∏–∞–ª–æ–≥ —Ç–∞–∫, —á—Ç–æ–±—ã –µ–≥–æ –±—ã–ª–æ —É–¥–æ–±–Ω–æ –æ–∑–≤—É—á–∏—Ç—å –≤ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç–µ:

            - –°–Ω–∞—á–∞–ª–∞ –º–µ–¥–ª–µ–Ω–Ω–æ –∏ —á—ë—Ç–∫–æ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.
            - –ó–∞—Ç–µ–º –∫—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.
            - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ–±–∞–≤—å —Å–º—ã—Å–ª–æ–≤–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ:
                - –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–æ–±–∞—è –∏–ª–∏ –≤–∞–∂–Ω–∞—è –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –æ–±—ä—è—Å–Ω–∏ –µ—ë –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.
                - –û–±—ä—è—Å–Ω–∏ –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

            –í–∞–∂–Ω–æ:
            - –ß—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –±—ã–ª–æ —É–¥–æ–±–Ω–æ –æ–∑–≤—É—á–∏—Ç—å, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1, 2, 3) –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏. –ù—É–º–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞.
            - –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —Å–ª–æ–≤–∞, –ø—Ä–æ–∏–∑–Ω–æ—Å–∏ –≤—Å—ë —á—ë—Ç–∫–æ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é.
            - –ù–µ —É–ø—É—Å–∫–∞–π –Ω–∏ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–ª–æ–≤–æ.
            - –ü–∏—à–∏ –≤ –≤–∏–¥–µ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–≤—ë–∑–¥–æ—á–∫–∏ (**) –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∑–Ω–∞–∫–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è.
            - –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, —á—ë—Ç–∫–∏–º –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –∞—É–¥–∏–æ.
            """
            )


        else:
            return JsonResponse({"error": "–ë“±—Ä—ã—Å –±”©–ª—ñ–º –∫”©—Ä—Å–µ—Ç—ñ–ª–¥—ñ."}, status=400)

        # Generate text explanation using GPT API.
        try:
            client = OpenAI(api_key=settings.OPENAI_API_KEY)
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7,
            )
            explanation_text = response.choices[0].message.content
        except Exception as e:
            return JsonResponse({"error": f"OpenAI “õ–∞—Ç–µ—Å—ñ: {str(e)}"}, status=500)

        # Generate audio explanation.
        audio_url = None
        if explanation_text:
            media_dir = settings.MEDIA_ROOT
            # Create a unique filename by appending a short uuid string
            unique_id = uuid.uuid4().hex[:8]
            audio_filename = f"audio_lesson_{lesson.id}_{section}_{unique_id}.mp3"
            # Remove previous audio files for this lesson & section.
            pattern = os.path.join(media_dir, f"audio_lesson_{lesson.id}_{section}_*.mp3")
            for old_audio in glob.glob(pattern):
                os.remove(old_audio)
            audio_path = os.path.join(media_dir, audio_filename)
            try:
                speech_response = openai.audio.speech.create(
                    model="tts-1-hd",
                    voice="alloy",
                    input=explanation_text,
                )
                with open(audio_path, "wb") as audio_file:
                    for chunk in speech_response.iter_bytes():
                        audio_file.write(chunk)
                audio_url = f"{settings.MEDIA_URL}{audio_filename}"
            except openai.OpenAIError as e:
                return JsonResponse({"error": f"–ê—É–¥–∏–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è “õ–∞—Ç–µ—Å—ñ: {str(e)}"}, status=500)

        # –î–µ—Ä–µ–∫“õ–æ—Ä“ì–∞ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ–Ω—ñ —Å–∞“õ—Ç–∞—É (Update –Ω–µ–º–µ—Å–µ Create)
        explanation_obj, created = Explanation.objects.update_or_create(
            lesson=lesson,
            section=section,
            defaults={
                "text": explanation_text,
                "audio_url": audio_url,
            }
        )

        return JsonResponse({
            "text": explanation_text,
            "audio_url": audio_url
        })
    return JsonResponse({"error": "Invalid request method"}, status=400)


def chat_with_gpt(request, lesson_id):
    """
    AJAX endpoint for a general chat interface.
    Gathers the current lesson's data, sets a system prompt,
    and returns GPT's response as JSON.
    """
    if request.method == "POST":
        user_question = request.POST.get("question", "")

        lesson = get_object_or_404(Lesson, id=lesson_id)
        lessons_data = (
            f"Lesson {lesson.id}: {lesson.title}\n"
            f"Content: {lesson.content}\n"
            f"Vocabulary: {lesson.vocabulary}\n"
            f"Grammar: {lesson.grammar}\n"
            f"Dialogue: {lesson.dialogue}\n"
        )

        system_prompt = (
            "You are an English teacher. You have the following lesson data:\n"
            f"{lessons_data}\n"
            "–ñ–∞—É–∞–ø –±–µ—Ä–µ–¥–µ ** –º“Ø–ª–¥–µ–º “õ–æ–ª–¥–∞–Ω–±–∞."
            "Answer the user's question in detail IN KAZAKH."
        )

        try:
            client = OpenAI(api_key=settings.OPENAI_API_KEY)
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_question},
                ],
                temperature=0.7,
            )
            gpt_answer = response.choices[0].message.content
            return JsonResponse({"answer": gpt_answer})
        except Exception as e:
            return JsonResponse({"error": str(e)}, status=500)

    return JsonResponse({"error": "Invalid request method."}, status=400)


def motivational_message(request):
    """
    AJAX endpoint: Generates a motivational message about learning English.
    """
    if request.method == "POST":
        prompt = (
            "–°–µ–Ω –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω –∂–∞—Å–∞–Ω–¥—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∞—Ä“õ—ã–ª—ã “Ø–π—Ä–µ–Ω—ñ–ø –∂“Ø—Ä–≥–µ–Ω –æ“õ—É—à—ã–ª–∞—Ä“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω —à–∞–±—ã—Ç—Ç–∞–Ω–¥—ã—Ä–∞—Ç—ã–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂–∞—Å–∞. "
            "–ñ–∞—É–∞–ø—Ç—ã “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ, “õ—ã—Å“õ–∞ ”ô—Ä—ñ –Ω“±—Å“õ–∞ –µ—Ç—ñ–ø –±–µ—Ä."
        )

        try:
            client = OpenAI(api_key=settings.OPENAI_API_KEY)
            response = client.chat.completions.create(
                model="gpt-4o-mini",  # Use your preferred model.
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7,
            )
            message = response.choices[0].message.content
            return JsonResponse({"message": message})
        except Exception as e:
            return JsonResponse({"error": str(e)}, status=500)
    return JsonResponse({"error": "Invalid request method."}, status=400)


def generate_quiz_questions(lesson_id):
    """
    –°–∞–±–∞“õ—Ç—ã“£ —Å”©–∑–¥—ñ–≥—ñ–Ω–µ–Ω —Å”©–∑–¥–µ—Ä–¥—ñ –±”©–ª—ñ–ø, `QuizQuestion` –º–æ–¥–µ–ª—ñ–Ω–µ –µ–Ω–≥—ñ–∑–µ—Ç—ñ–Ω —Ñ—É–Ω–∫—Ü–∏—è.
    –ï–≥–µ—Ä —Å“±—Ä–∞“õ—Ç–∞—Ä –±“±—Ä—ã–Ω–Ω–∞–Ω –±–∞—Ä –±–æ–ª—Å–∞, –∂–∞“£–∞–ª–∞—Ä—ã–Ω “õ–æ—Å–ø–∞–π–¥—ã.
    """
    lesson = get_object_or_404(Lesson, id=lesson_id)

    # –ë–∞—Ä–ª—ã“õ –±“±—Ä—ã–Ω“ì—ã —Å“±—Ä–∞“õ—Ç–∞—Ä–¥—ã ”©—à—ñ—Ä—É (–µ—Å–∫—ñ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ —Ç–∞–∑–∞—Ä—Ç—É)
    QuizQuestion.objects.filter(lesson=lesson).delete()

    vocabulary_text = lesson.vocabulary.strip()
    lines = vocabulary_text.split("\n")

    word_list = []

    # 1. –°”©–∑–¥–µ—Ä–¥—ñ –±”©–ª—ñ–ø, —Ç—ñ–∑—ñ–º –∂–∞—Å–∞—É
    for line in lines:
        parts = line.split(" ‚Äì ")  # –°”©–∑–¥–µ—Ä " ‚Äì " –∞—Ä“õ—ã–ª—ã –±”©–ª—ñ–Ω–≥–µ–Ω
        if len(parts) == 2:
            english_word = parts[0].strip()
            kazakh_translation = parts[1].strip()
            word_list.append((english_word, kazakh_translation))

    # 2. –°”©–∑–¥–µ—Ä–¥—ñ `QuizQuestion` –º–æ–¥–µ–ª—ñ–Ω–µ –µ–Ω–≥—ñ–∑—É
    questions = [
        QuizQuestion(lesson=lesson, english_word=english_word, kazakh_translation=kazakh_translation)
        for english_word, kazakh_translation in word_list
    ]

    QuizQuestion.objects.bulk_create(questions)  # ‚úÖ –ë–∞—Ä–ª—ã“õ —Å”©–∑–¥–µ—Ä–¥—ñ –±—ñ—Ä–¥–µ–Ω –µ–Ω–≥—ñ–∑—É

    print(f"‚úÖ {len(questions)} —Å“±—Ä–∞“õ –±–∞–∑–∞“ì–∞ –µ–Ω–≥—ñ–∑—ñ–ª–¥—ñ!")


def start_quiz(request, lesson_id):
    """
    –¢–µ—Å—Ç—Ç—ñ –±–∞—Å—Ç–∞“ì–∞–Ω–¥–∞, –µ–≥–µ—Ä –±–∞–∑–∞ –±–æ—Å –±–æ–ª—Å–∞, —Å“±—Ä–∞“õ—Ç–∞—Ä–¥—ã –∞–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ —Ç–æ–ª—Ç—ã—Ä–∞–¥—ã.
    –°–æ—Å—ã–Ω —Ç–µ—Å—Ç —Å“±—Ä–∞“õ—Ç–∞—Ä—ã–Ω “õ–∞–π—Ç–∞—Ä–∞–¥—ã.
    """
    lesson = get_object_or_404(Lesson, id=lesson_id)

    # –¢–µ—Å—Ç —Å“±—Ä–∞“õ—Ç–∞—Ä—ã–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–ª–∞—É (–µ–≥–µ—Ä ”ô–ª—ñ –µ–Ω–≥—ñ–∑—ñ–ª–º–µ—Å–µ)
    generate_quiz_questions(lesson_id)

    # –ë–∞—Ä–ª—ã“õ —Ç–µ—Å—Ç —Å“±—Ä–∞“õ—Ç–∞—Ä—ã–Ω –∞–ª—É
    questions = list(QuizQuestion.objects.filter(lesson=lesson))

    if len(questions) < 4:
        return JsonResponse({"error": "–ë“±–ª —Å–∞–±–∞“õ—Ç–∞ –∂–µ—Ç–∫—ñ–ª—ñ–∫—Ç—ñ —Å”©–∑–¥–µ—Ä –∂–æ“õ!"}, status=400)

    random.shuffle(questions)

    question_data = []

    for q in questions:
        correct_answer = q.kazakh_translation

        # ‚ùå –ë“±—Ä—ã–Ω“ì—ã –∫–æ–¥—Ç–∞ “õ–∞—Ç–µ –±–∞—Ä: –î“±—Ä—ã—Å –∂–∞—É–∞–ø –∫–µ–π–¥–µ –∂–æ“ì–∞–ª—ã–ø –∫–µ—Ç—É—ñ –º“Ø–º–∫—ñ–Ω
        incorrect_answers = [w.kazakh_translation for w in questions if w.kazakh_translation != correct_answer]

        # ‚úÖ “ö–∞—Ç–µ –∂–∞—É–∞–ø—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –¥“±—Ä—ã—Å—Ç–∞—É
        if len(incorrect_answers) < 3:
            incorrect_answers += ["“ö–∞—Ç–µ –∂–∞—É–∞–ø"] * (3 - len(incorrect_answers))

        incorrect_answers = random.sample(incorrect_answers, 3)  # –¢–µ–∫ 3 “õ–∞—Ç–µ –∂–∞—É–∞–ø —Ç–∞“£–¥–∞—É
        choices = incorrect_answers + [correct_answer]  # –î“±—Ä—ã—Å –∂–∞—É–∞–ø—Ç—ã “õ–æ—Å—É
        random.shuffle(choices)  # –ë–∞—Ä–ª—ã“ì—ã–Ω –∞—Ä–∞–ª–∞—Å—Ç—ã—Ä—É

        question_data.append({
            "id": q.id,
            "english_word": q.english_word,
            "choices": choices
        })

    return JsonResponse({"questions": question_data})


@csrf_exempt
def submit_answer(request, lesson_id):
    if request.method == "POST":
        # –°–µ—Å—Å–∏—è–Ω—ã“£ –±–∞—Ä-–∂–æ“ì—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ–ø, “õ–∞–∂–µ—Ç –±–æ–ª—Å–∞ “õ“±—Ä—É
        if not request.session.session_key:
            request.session.create()
        user_id = str(request.user.id) if request.user.is_authenticated else request.session.session_key or "guest"

        lesson = get_object_or_404(Lesson, id=lesson_id)
        attempt, created = QuizAttempt.objects.get_or_create(user_id=user_id, lesson=lesson)
        question_id = request.POST.get("question_id")
        selected_answer = request.POST.get("answer")
        question = get_object_or_404(QuizQuestion, id=question_id)

        # –°–∞–±–∞“õ“õ–∞ “õ–∞—Ç—ã—Å—Ç—ã —Ç–µ—Å—Ç—Ç–µ–≥—ñ –∂–∞–ª–ø—ã —Å“±—Ä–∞“õ—Ç–∞—Ä —Å–∞–Ω—ã
        total_questions = lesson.quiz_questions.count()

        # –î“±—Ä—ã—Å –∂–∞—É–∞–ø –±–æ–ª—Å–∞ score-–¥—ã –∞—Ä—Ç—Ç—ã—Ä—ã–ø, “õ–∞—Ç–µ –±–æ–ª—Å–∞ attempts-—Ç—ã –∞—Ä—Ç—Ç—ã—Ä–∞–º—ã–∑
        if question.kazakh_translation == selected_answer:
            attempt.add_score()
        else:
            attempt.increase_attempts()

        # –ï–≥–µ—Ä –±–∞—Ä–ª—ã“õ —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ–ª–¥—ñ –¥–µ–ø –µ—Å–µ–ø—Ç–µ—Å–µ–∫,
        # (—è“ì–Ω–∏, –¥“±—Ä—ã—Å –∂–∞—É–∞–ø—Ç–∞—Ä –º–µ–Ω “õ–∞—Ç–µ–Ω—ñ“£ “õ–æ—Å—ã–Ω–¥—ã—Å—ã >= –∂–∞–ª–ø—ã —Å“±—Ä–∞“õ —Å–∞–Ω—ã),
        # —Ç–µ—Å—Ç –∞—è“õ—Ç–∞–ª“ì–∞–Ω—ã–Ω —Ç–µ–∫—Å–µ—Ä–µ–º—ñ–∑
        if (attempt.score + attempt.attempts) >= total_questions:
            attempt.check_pass()

        # –ï–≥–µ—Ä —Ç–µ—Å—Ç ”©—Ç—ñ–ª—Å–µ, –∫–µ–ª–µ—Å—ñ —Å–∞–±–∞“õ—Ç—ã –∞—à—É “Ø—à—ñ–Ω session-–¥—ã –∂–∞“£–∞—Ä—Ç–∞–º—ã–∑
        if attempt.is_passed:
            passed_lessons = list(
                QuizAttempt.objects.filter(user_id=user_id, is_passed=True)
                .values_list("lesson_id", flat=True)
            )
            # –ï“£ “Ø–ª–∫–µ–Ω ”©—Ç–∫–µ–Ω —Å–∞–±–∞“õ –Ω”©–º—ñ—Ä—ñ–Ω–µ 1 “õ–æ—Å–∞–º—ã–∑
            next_lesson = max(passed_lessons) + 1 if passed_lessons else 1
            # –ö–µ–ª–µ—Å—ñ —Å–∞–±–∞“õ —à—ã–Ω—ã–º–µ–Ω –±–∞—Ä-–∂–æ“ì—ã–Ω —Ç–µ–∫—Å–µ—Ä–µ–º—ñ–∑
            if Lesson.objects.filter(id=next_lesson).exists():
                passed_lessons.append(next_lesson)
            request.session['passed_lessons'] = passed_lessons
            request.session.save()

            return JsonResponse({
                "correct": question.kazakh_translation == selected_answer,
                "score": attempt.score,
                "attempts": attempt.attempts,
                "passed": attempt.is_passed,
                "next_lesson": next_lesson
            })

        # –¢–µ—Å—Ç ”ô–ª—ñ –∞—è“õ—Ç–∞–ª–º–∞“ì–∞–Ω –∂–∞“ì–¥–∞–π–¥–∞ (–±–∞—Ä–ª—ã“õ —Å“±—Ä–∞“õ“õ–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ–ª–º–µ–≥–µ–Ω –∂–∞“ì–¥–∞–π–¥–∞)
        return JsonResponse({
            "correct": question.kazakh_translation == selected_answer,
            "score": attempt.score,
            "attempts": attempt.attempts,
            "passed": attempt.is_passed
        })

    return JsonResponse({"error": "Invalid request"}, status=400)


def account_locked(request):
    """
    –ê–∫–∫–∞—É–Ω—Ç “õ“±–ª—Ç–∞—É–ª—ã –±–æ–ª“ì–∞–Ω –∂–∞“ì–¥–∞–π–¥–∞ “õ–æ–ª–¥–∞–Ω—É—à—ã“ì–∞ —Ö–∞–±–∞—Ä –±–µ—Ä–µ—Ç—ñ–Ω –±–µ—Ç.
    –ï–≥–µ—Ä –ø—Ä–æ—Ñ–∏–ª—å–¥–µ lock_until –º”ô–Ω—ñ –±–æ–ª—Å–∞, “õ–∞–ª“ì–∞–Ω “õ“±–ª—Ç–∞—É —É–∞“õ—ã—Ç—ã–Ω –µ—Å–µ–ø—Ç–µ–ø –∫”©—Ä—Å–µ—Ç–µ–¥—ñ.
    """
    lock_until = None
    remaining_time = None
    if request.user.is_authenticated:
        profile = getattr(request.user, 'profile', None)
        if profile and profile.lock_until:
            lock_until = profile.lock_until
            remaining_time = (lock_until - timezone.now()).days
    context = {
        'lock_until': lock_until,
        'remaining_days': remaining_time,
    }
    return render(request, 'lessons/account_locked.html', context)


@login_required
def vocabulary_list(request):
    all_vocab_texts = Lesson.objects.values_list('vocabulary', flat=True)

    all_words_set = set()
    for vocab in all_vocab_texts:
        words = [word.strip() for word in vocab.split('\n') if word.strip()]
        all_words_set.update(words)

    sorted_words = sorted(all_words_set)
    numbered_words = list(enumerate(sorted_words, start=1))

    return render(request, 'lessons/vocabulary_list.html', {'words': numbered_words})


def register_lead(request):
    if request.method == "POST":
        name  = request.POST.get("name")
        phone = request.POST.get("phone")
        if not (name and phone):
            return JsonResponse({"error": "–ê—Ç—ã –º–µ–Ω –Ω”©–º—ñ—Ä—ñ–Ω —Ç–æ–ª—Ç—ã—Ä—ã“£—ã–∑"}, status=400)

        Lead.objects.create(name=name, phone=phone)

        lesson_url = request.build_absolute_uri(
            reverse("lesson_detail", args=[1])   # 1‚Äë—Å–∞–±–∞“õ
        )
        return JsonResponse({"redirect_url": lesson_url})

    return JsonResponse({"error": "POST –∫–µ—Ä–µ–∫"}, status=405)
