import openai
from openai import OpenAI
from django.views.decorators.csrf import csrf_exempt
from django.shortcuts import render, get_object_or_404, redirect
from django.utils import timezone
from .models import Lesson, QuizQuestion, QuizAttempt, Explanation, Lead
from django.http import JsonResponse
from django.conf import settings
from django.contrib.auth import login
from django.contrib.auth.decorators import login_required
from django.urls import reverse

from .forms import CustomRegisterForm
from .models import UserProfile
from django.contrib.auth import login

import random
import os
import glob
import uuid
import re


def register(request):
    if request.method == 'POST':
        form = CustomRegisterForm(request.POST)
        if form.is_valid():
            user = form.save()
            phone = form.cleaned_data.get('phone')
            # ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∂–∞—Å–∞—É –∫–µ–∑—ñ–Ω–¥–µ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä—ñ–Ω —Å–∞“õ—Ç–∞—É“ì–∞ –±–æ–ª–∞–¥—ã (–µ–≥–µ—Ä UserProfile-—Ç–µ —Å–∞“õ—Ç–∞“ì—ã“£—ã–∑ –∫–µ–ª—Å–µ)
            UserProfile.objects.create(user=user, phone=phone)
            login(request, user)
            return redirect('lesson_list')
    else:
        form = CustomRegisterForm()
    return render(request, 'lessons/register.html', {'form': form})




def lesson_list(request):
    if request.user.is_authenticated:
        user_id = str(request.user.id)
        passed_lessons = list(
            QuizAttempt.objects.filter(user_id=user_id, is_passed=True)
            .values_list("lesson_id", flat=True)
        )
        # ‚úÖ –ê“õ—ã–ª—ã –µ–º–µ—Å “õ–æ–ª–¥–∞–Ω—É—à—ã –±–æ–ª—Å–∞ ‚Äì —Ç–µ–∫ 1‚Äì15 —Å–∞–±–∞“õ“õ–∞ “ì–∞–Ω–∞ –¥–æ—Å—Ç—É–ø
        if not request.user.profile.is_paid:
            passed_lessons = [i for i in passed_lessons if i <= 10 or i >= 251]
        if not passed_lessons:
            passed_lessons = [0]
    else:
        passed_lessons = request.session.get('passed_lessons', [0])

    if not passed_lessons:
        passed_lessons = [0]

    max_passed = max(passed_lessons)
    base_unlocked = [1, 251]
    # –ï–∫—ñ –±”©–ª–µ–∫ –º–∞–∫—Å–∏–º–∞–ª–¥—ã ”©—Ç–∫–µ–Ω —Å–∞–±–∞“õ—Ç–∞—Ä–¥—ã —Ç–∞–±—É
    max_kz = max([x for x in passed_lessons if x < 251], default=0)
    max_ru = max([x for x in passed_lessons if x >= 251], default=0)

    # “ö–∞–∑–∞“õ—à–∞ –∂”ô–Ω–µ –æ—Ä—ã—Å—à–∞ unlocked —Ç—ñ–∑—ñ–º–¥–µ—Ä
    unlocked_kz = list(range(1, max_kz + 2)) if max_kz else []
    unlocked_ru = list(range(251, max_ru + 2)) if max_ru else []

    # –ñ–∞–ª–ø—ã unlocked
    unlocked_lessons = sorted(set(base_unlocked + unlocked_kz + unlocked_ru))

    # –°–µ—Å—Å–∏—è“ì–∞ —Å–∞“õ—Ç–∞—É (–≥–æ—Å—Ç—å “Ø—à—ñ–Ω)
    request.session['passed_lessons'] = unlocked_lessons
    request.session.save()

    lessons = Lesson.objects.all().order_by('id')

    stages = [
        {'title': 'Beginner', 'lessons': lessons[0:50]},
        {'title': 'Elementary', 'lessons': lessons[50:100]},
        {'title': 'Pre-Intermediate', 'lessons': lessons[100:150]},
        {'title': 'Intermediate', 'lessons': lessons[150:200]},
        {'title': 'Upper-Intermediate', 'lessons': lessons[200:250]},
        # {'title': 'Beginner (ru)', 'lessons': lessons[250:300]},
        # {'title': 'Elementary (ru)', 'lessons': lessons[300:350]},
        # {'title': 'Pre-Intermediate (ru)', 'lessons': lessons[350:400]},
        # {'title': 'Intermediate (ru)', 'lessons': lessons[400:450]},
        # {'title': 'Upper-Intermediate (ru)', 'lessons': lessons[450:500]},
    ]

    # –ü—Ä–æ–≥—Ä–µ—Å—Å
    for stage in stages:
        total = len(stage['lessons'])
        passed = sum(1 for l in stage['lessons'] if l.id in passed_lessons)
        stage['progress'] = {
            'total': total,
            'passed': passed,
            'percentage': int((passed / total) * 100) if total > 0 else 0
        }

    return render(request, "lessons/lesson_list.html", {
        "stages": stages,
        "passed_lessons": unlocked_lessons,
        "is_guest": not request.user.is_authenticated
    })


def lesson_detail(request, lesson_id):
    lesson = get_object_or_404(Lesson, id=lesson_id)

    # Free lessons that are available to everyone
    free_lesson_ids = {1, 2, 3, 251, 252, 253}


    # Redirect to advertisement if not free and user is unauthenticated
    if lesson.id not in free_lesson_ids and not request.user.is_authenticated:
        return redirect('/advertisement/')

    # “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã“£ ”©—Ç—É “õ“±“õ—ã“ì—ã–Ω —Ç–µ–∫—Å–µ—Ä—É
    if lesson.id not in free_lesson_ids and request.user.is_authenticated:
        passed_lessons = request.session.get('passed_lessons', [])

        if not request.user.profile.is_paid and lesson.id > 10 and lesson.id < 251:
            return redirect('advertisement')

        if lesson.id not in passed_lessons:
            return redirect('lesson_list')

    # üî• –°–∞–±–∞“õ—Ç—ã“£ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ–ª–µ—Ä—ñ–Ω —Å–µ—Å—Å–∏—è–¥–∞–Ω –∞–ª—É
    explanations_qs = Explanation.objects.filter(lesson=lesson)
    explanations = {
        exp.section: {"text": exp.text, "audio_url": exp.audio_url}
        for exp in explanations_qs
    }

    return render(request, 'lessons/lesson_detail.html', {
        'lesson': lesson,
        'explanations': explanations,
    })


def advertisement(request):
    """
    –ë“±–ª –±–µ—Ç—Ç–µ –æ“õ—É—à—ã“ì–∞ –º–∞“£—ã–∑–¥—ã –∞“õ–ø–∞—Ä–∞—Ç –ø–µ–Ω –∂–∞—Ä–Ω–∞–º–∞ –∫”©—Ä—Å–µ—Ç—ñ–ª–µ–¥—ñ:
      - –û“õ—É –∞“õ—ã—Å—ã: 15000 —Ç–µ“£–≥–µ, 1 –∂—ã–ª“ì–∞
      - ”®—Ç–µ –ø–∞–π–¥–∞–ª—ã —Å–∞–±–∞“õ—Ç–∞—Ä, –∞“ì—ã–ª—à—ã–Ω –º“±“ì–∞–ª—ñ–º–¥–µ—Ä—ñ –º–µ–Ω –∞“õ—ã–ª–¥—ã –∂–∞—Å–∞–Ω–¥—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∞—Ä“õ—ã–ª—ã
      - WhatsApp —Å—ñ–ª—Ç–µ–º–µ—Å—ñ: 87781029394
    """
    return render(request, 'lessons/advertisement.html', {
        'price': '15000 —Ç–µ“£–≥–µ',
        'duration': '1 –∂—ã–ª“ì–∞',
        'whatsapp': '77781029394',
        'message': '”®—Ç–µ –ø–∞–π–¥–∞–ª—ã! –ê“ì—ã–ª—à—ã–Ω –º“±“ì–∞–ª—ñ–º–¥–µ—Ä—ñ –º–µ–Ω –∞“õ—ã–ª–¥—ã –∂–∞—Å–∞–Ω–¥—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∞—Ä“õ—ã–ª—ã “Ø–π—Ä–µ—Ç–µ–º—ñ–∑.'
    })


def explain_section(request, lesson_id):
    """
    AJAX endpoint: generates text and audio explanation for a given section,
    saves it in the session (keyed by lesson ID), and returns JSON.
    """
    if request.method == "POST":
        if not request.user.is_superuser:
            return JsonResponse({'error': '–†“±“õ—Å–∞—Ç –∂–æ“õ'}, status=403)

        section = request.POST.get("section")
        lesson = get_object_or_404(Lesson, id=lesson_id)

        # Build the prompt based on the requested section.
        if section == "content":
            prompt = (
                f"""–°–µ–Ω –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ –º“±“ì–∞–ª—ñ–º—ñ—Å—ñ“£. –¢”©–º–µ–Ω–¥–µ –ê–º–µ—Ä–∏–∫–∞–Ω–¥—ã“õ –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω–¥–µ–≥—ñ —Å–∞–±–∞“õ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –±–µ—Ä—ñ–ª–≥–µ–Ω ‚Äì –æ–ª “õ–∞–∑–∞“õ —Ç—ñ–ª–¥—ñ, –∂–∞—Å—ã 12-–¥–µ–Ω –∞—Å“õ–∞–Ω, –¥–µ“£–≥–µ–π—ñ 0-–¥–µ–Ω B2-–≥–µ –¥–µ–π—ñ–Ω–≥—ñ –æ“õ—É—à—ã–ª–∞—Ä“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω:

        –°–∞–±–∞“õ—Ç—ã“£ –º–∞–∑–º“±–Ω—ã:
        {lesson.content}

        –û—Å—ã –º”ô—Ç—ñ–Ω–¥—ñ –∞—É–¥–∏–æ —Ñ–∞–π–ª —Ç“Ø—Ä—ñ–Ω–¥–µ –∞–π—Ç—É“ì–∞ —ã“£“ì–∞–π–ª—ã –±–æ–ª–∞—Ç—ã–Ω–¥–∞–π –µ—Ç—ñ–ø —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—ñ–ø –±–µ—Ä:

        - ”ò—É–µ–ª—ñ ”ô—Ä–±—ñ—Ä —Å”©–π–ª–µ–º–¥—ñ –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω–¥–µ –∞–Ω—ã“õ –∂”ô–Ω–µ —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ –µ—Ç—ñ–ø –∞–π—Ç.
        - ”ò—Ä–±—ñ—Ä —Å”©–π–ª–µ–º–¥—ñ –±–∞—è—É –∂”ô–Ω–µ –∞–Ω—ã“õ –∞–π—Ç.
        - –°–æ–¥–∞–Ω —Å–æ“£ —Å–æ–ª —Å”©–π–ª–µ–º–¥—ñ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–µ “õ—ã—Å“õ–∞ ”ô—Ä—ñ —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ –µ—Ç—ñ–ø –∞—É–¥–∞—Ä.
        - –†–µ—Ç—Ç—ñ–∫ —Å–∞–Ω–¥–∞—Ä–¥—ã (1, 2, 3) “õ–æ–ª–¥–∞–Ω–±–∞. –°”©–π–ª–µ–º–¥–µ—Ä–¥—ñ –Ω”©–º—ñ—Ä–ª–µ—É–¥—ñ“£ “õ–∞–∂–µ—Ç—ñ –∂–æ“õ.
        - ”ò—Ä–±—ñ—Ä —Å”©–π–ª–µ–º–¥—ñ –Ω“Ø–∫—Ç–µ–º–µ–Ω –∞—è“õ—Ç–∞.
        - –¢—ñ–ø—Ç—ñ —Å“±—Ä–∞—É–ª—ã —Å”©–π–ª–µ–º–Ω–µ–Ω –∫–µ–π—ñ–Ω –¥–µ –Ω“Ø–∫—Ç–µ “õ–æ–π. –ú—ã—Å–∞–ª—ã: Is this your book?.
        - “ö–∏—ã–Ω –Ω–µ–º–µ—Å–µ –∫”©–ø–º–∞“ì—ã–Ω–∞–ª—ã —Å”©–∑ —Ç—ñ—Ä–∫–µ—Å—Ç–µ—Ä—ñ–Ω–µ —Ç–æ“õ—Ç–∞–ª—ã–ø, –æ–ª–∞—Ä–¥—ã“£ –º–∞“ì—ã–Ω–∞—Å—ã–Ω “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ “õ—ã—Å“õ–∞—à–∞ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä.
        - –°”©–∑–¥–µ—Ä–¥—ñ “õ—ã—Å“õ–∞—Ä—Ç–ø–∞, –æ–ª–∞—Ä–¥—ã —Ç–æ–ª—ã“õ –∞–π—Ç. “ö–∏—ã–Ω —Ç“±—Å—Ç–∞—Ä—ã–Ω –¥–∞ –Ω–∞–∑–∞—Ä–¥–∞–Ω —Ç—ã—Å “õ–∞–ª–¥—ã—Ä–º–∞.
        - –ï—à“õ–∞–Ω–¥–∞–π —Å”©–∑–¥—ñ –Ω–µ–º–µ—Å–µ —Å”©–π–ª–µ–º–¥—ñ “õ–∞–ª–¥—ã—Ä–º–∞.
        - –°”©–∑–¥–µ—Ä–¥—ñ –±”©–ª–µ–∫—Ç–µ–ø –∫”©—Ä—Å–µ—Ç—É “Ø—à—ñ–Ω –∂“±–ª–¥—ã–∑—à–∞–ª–∞—Ä–¥—ã (**) “õ–æ–ª–¥–∞–Ω–±–∞. –ú”ô—Ç—ñ–Ω–¥—ñ “õ–∞—Ä–∞–ø–∞–π—ã–º –º”ô—Ç—ñ–Ω —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –∂–∞–∑.
        - “ö–∞—Ä–∞–ø–∞–π—ã–º, —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ —Ç—ñ–ª –ø–∞–π–¥–∞–ª–∞–Ω, “±–∑—ã–Ω —Å”©–π–ª–µ–º–¥–µ—Ä–¥–µ–Ω –∞—É–ª–∞“õ –±–æ–ª. –ë“±–ª –º”ô—Ç—ñ–Ω–¥—ñ –¥—ã–±—ã—Å—Ç–∞—É–¥—ã –∂–µ“£—ñ–ª–¥–µ—Ç–µ–¥—ñ.

        –ñ–∞—É–∞–±—ã“£ —Ç–∞–±–∏“ì–∏, –æ“õ—É—à—ã–ª–∞—Ä“ì–∞ –æ“£–∞–π —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ –∂”ô–Ω–µ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç“õ–∞ —Ç—ñ–∫–µ–ª–µ–π –∞–π–Ω–∞–ª–¥—ã—Ä—É“ì–∞ –¥–∞–π—ã–Ω –±–æ–ª—É—ã –∫–µ—Ä–µ–∫.
        """
            )

        elif section == "vocabulary":
            prompt = (
                f"""–°–µ–Ω –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ –º“±“ì–∞–ª—ñ–º—ñ—Å—ñ“£ (–ê–º–µ—Ä–∏–∫–∞–Ω–¥—ã“õ –∞“ì—ã–ª—à—ã–Ω). –¢”©–º–µ–Ω–¥–µ 12 –∂–∞—Å—Ç–∞–Ω –∞—Å“õ–∞–Ω, –¥–µ“£–≥–µ–π—ñ 0-–¥–µ–Ω B2-–≥–µ –¥–µ–π—ñ–Ω–≥—ñ “õ–∞–∑–∞“õ—Ç—ñ–ª–¥—ñ –æ“õ—É—à—ã–ª–∞—Ä“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Å–∞–±–∞“õ—Ç—ã“£ —Å”©–∑–¥—ñ–≥—ñ –±–µ—Ä—ñ–ª–≥–µ–Ω:

        –°–∞–±–∞“õ—Ç—ã“£ —Å”©–∑–¥—ñ–≥—ñ:
        {lesson.vocabulary}

        –û—Å—ã —Å”©–∑–¥–µ—Ä–¥—ñ –∞—É–¥–∏–æ—Ñ–∞–π–ª“ì–∞ –æ“£–∞–π –∞–π–Ω–∞–ª–¥—ã—Ä—É“ì–∞ –±–æ–ª–∞—Ç—ã–Ω–¥–∞–π –µ—Ç—ñ–ø —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—ñ–ø –∂–∞–∑. ”ò—Ä–±—ñ—Ä —Å”©–∑–¥—ñ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—É “Ø—à—ñ–Ω –∫–µ–ª–µ—Å—ñ “õ“±—Ä—ã–ª—ã–º–¥—ã “±—Å—Ç–∞–Ω:

        - –ê–ª–¥—ã–º–µ–Ω –∞“ì—ã–ª—à—ã–Ω—à–∞ —Å”©–∑–¥—ñ –∞–Ω—ã“õ –∞–π—Ç, —Å–æ–¥–∞–Ω –∫–µ–π—ñ–Ω –¥–µ—Ä–µ—É –æ–Ω—ã“£ “õ–∞–∑–∞“õ—à–∞ –∞—É–¥–∞—Ä–º–∞—Å—ã–Ω –∞–π—Ç—ã–ø, —Å–æ“£—ã–Ω–∞ –Ω“Ø–∫—Ç–µ “õ–æ–π.
        - ”ò—Ä–±—ñ—Ä —Å”©–π–ª–µ–º–¥—ñ –±–∞—è—É –∂”ô–Ω–µ –∞–Ω—ã“õ –∞–π—Ç.
        - –°–æ–¥–∞–Ω –∫–µ–π—ñ–Ω –æ—Å—ã —Å”©–∑–¥—ñ“£ –º–∞“ì—ã–Ω–∞—Å—ã–Ω “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ –±—ñ—Ä —Å”©–π–ª–µ–º–º–µ–Ω “õ—ã—Å“õ–∞ ”ô—Ä—ñ —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ –µ—Ç—ñ–ø —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä.
        - –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω–¥–µ “õ—ã—Å“õ–∞ –º—ã—Å–∞–ª —Å”©–π–ª–µ–º –∂–∞–∑ –¥–∞, –∂”ô–Ω–µ –æ–Ω—ã“£ “õ–∞–∑–∞“õ—à–∞ –∞—É–¥–∞—Ä–º–∞—Å—ã–Ω –∫”©—Ä—Å–µ—Ç.
        - –ï–≥–µ—Ä —Å”©–∑–¥—ñ“£ –±—ñ—Ä–Ω–µ—à–µ –º–∞“ì—ã–Ω–∞—Å—ã –±–æ–ª—Å–∞, ”ô—Ä –º–∞“ì—ã–Ω–∞—Å—ã–Ω –∂–µ–∫–µ “õ—ã—Å“õ–∞ “õ–∞–∑–∞“õ—à–∞ —Å”©–π–ª–µ–º–º–µ–Ω —Å–∏–ø–∞—Ç—Ç–∞.
        - –ú—ã—Å–∞–ª –∫–µ–ª—Ç—ñ—Ä–≥–µ–Ω–¥–µ "Example" —Å”©–∑—ñ–Ω “õ–æ–ª–¥–∞–Ω–±–∞. –ú—ã—Å–∞–ª —Å”©–π–ª–µ–º–¥—ñ –µ—à“õ–∞–Ω–¥–∞–π –±–µ–ª–≥—ñ–ª–µ—Ä—Å—ñ–∑ —Ç—ñ–∫–µ–ª–µ–π –∫–µ–ª—Ç—ñ—Ä.

        –ú–∞“£—ã–∑–¥—ã:
        - –°”©–∑–¥–µ—Ä–¥—ñ“£ —Ç—ñ–∑—ñ–º—ñ–Ω–¥–µ —Ä–µ—Ç—Ç—ñ–∫ –Ω”©–º—ñ—Ä–ª–µ—Ä–¥—ñ “õ–æ–ª–¥–∞–Ω–±–∞.
        - ”ò—Ä–±—ñ—Ä —Å”©–π–ª–µ–º–¥—ñ –Ω“Ø–∫—Ç–µ–º–µ–Ω –∞—è“õ—Ç–∞.
        - –¢—ñ–ø—Ç—ñ —Å“±—Ä–∞—É–ª—ã —Å”©–π–ª–µ–º–Ω–µ–Ω –∫–µ–π—ñ–Ω –¥–µ –Ω“Ø–∫—Ç–µ “õ–æ–π. –ú—ã—Å–∞–ª—ã: Is this your book?.
        - –ï—à–±—ñ—Ä —Å”©–∑–¥—ñ –Ω–µ–º–µ—Å–µ —Å”©–π–ª–µ–º–¥—ñ —Ç–∞—Å—Ç–∞–ø –∫–µ—Ç–ø–µ.
        - –ê–º–µ—Ä–∏–∫–∞–Ω–¥—ã“õ –∞“ì—ã–ª—à—ã–Ω–Ω—ã“£ –µ–º–ª–µ—Å—ñ –º–µ–Ω –ª–µ–∫—Å–∏–∫–∞—Å—ã–Ω “õ–æ–ª–¥–∞–Ω.
        - –°”©–∑–¥–µ—Ä–¥—ñ “õ—ã—Å“õ–∞—Ä—Ç–ø–∞–π, –±”©–ª—ñ–∫—Ç–µ—Ä—ñ–Ω —Ç–∞—Å—Ç–∞–º–∞–π –∞–π—Ç ‚Äì –±”ô—Ä—ñ–Ω –∞–Ω—ã“õ –∂”ô–Ω–µ —Ç–æ–ª—ã“õ –∂–µ—Ç–∫—ñ–∑.
        - –ñ“±–ª–¥—ã–∑—à–∞–ª–∞—Ä (**) –Ω–µ–º–µ—Å–µ ”©–∑–≥–µ –µ—Ä–µ–∫—à–µ–ª–µ—É –±–µ–ª–≥—ñ–ª–µ—Ä—ñ–Ω –ø–∞–π–¥–∞–ª–∞–Ω–±–∞ ‚Äì —Ç–µ–∫ –∂–∞–π –º”ô—Ç—ñ–Ω –∂–∞–∑.
        - –ñ–∞—É–∞–ø –º–∞–∑–º“±–Ω—ã “õ—ã—Å“õ–∞, –Ω–∞“õ—Ç—ã –∂”ô–Ω–µ –¥–∞—É—ã—Å“õ–∞ —Å–∞–ª—É“ì–∞ “õ–æ–ª–∞–π–ª—ã –±–æ–ª—É—ã –∫–µ—Ä–µ–∫.
        """
            )

        elif section == "grammar":
            prompt = (
                f"""–°–µ–Ω –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ –º“±“ì–∞–ª—ñ–º—ñ—Å—ñ“£. –¢”©–º–µ–Ω–¥–µ –ê–º–µ—Ä–∏–∫–∞–Ω–¥—ã“õ –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω–¥–µ–≥—ñ –±—ñ—Ä –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞–ª—ã“õ –µ—Ä–µ–∂–µ –±–µ—Ä—ñ–ª–≥–µ–Ω. –û—Å—ã –µ—Ä–µ–∂–µ–Ω—ñ 12 –∂–∞—Å—Ç–∞–Ω –∞—Å“õ–∞–Ω, –¥–µ“£–≥–µ–π—ñ 0-–¥–µ–Ω B2-–≥–µ –¥–µ–π—ñ–Ω–≥—ñ “õ–∞–∑–∞“õ—Ç—ñ–ª–¥—ñ –æ“õ—É—à—ã–ª–∞—Ä“ì–∞ ”©—Ç–µ “õ–∞—Ä–∞–ø–∞–π—ã–º —Ç—ñ–ª–º–µ–Ω —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—ñ–ø –±–µ—Ä:

        –°–∞–±–∞“õ—Ç—ã“£ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞–ª—ã“õ –µ—Ä–µ–∂–µ—Å—ñ:
        {lesson.grammar}

        –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞–Ω—ã –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—Ç–∞ –∞–π—Ç—É“ì–∞ —ã“£“ì–∞–π–ª—ã –±–æ–ª—É “Ø—à—ñ–Ω —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—É–¥—ñ –∫–µ–ª–µ—Å—ñ –±–∞“ì—ã—Ç—Ç–∞ –∂“Ø—Ä–≥—ñ–∑:

        - ”ò—Ä–±—ñ—Ä —Å”©–π–ª–µ–º–¥—ñ –±–∞—è—É –∂”ô–Ω–µ –∞–Ω—ã“õ –∞–π—Ç.
        - –ï—Ä–µ–∂–µ–Ω—ñ –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ–Ω—à–µ “õ–∞—Ä–∞–ø–∞–π—ã–º, —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ —Ç—ñ–ª–º–µ–Ω —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä. –ö“Ø—Ä–¥–µ–ª—ñ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞–ª—ã“õ —Ç–µ—Ä–º–∏–Ω–¥–µ—Ä–¥—ñ “õ–æ–ª–¥–∞–Ω–±–∞.
        - ”ò—Ä –µ—Ä–µ–∂–µ–≥–µ “õ–∞—Ç—ã—Å—Ç—ã –∫–µ–º—ñ–Ω–¥–µ –µ–∫—ñ “õ—ã—Å“õ–∞ –º—ã—Å–∞–ª –∫–µ–ª—Ç—ñ—Ä. –ú—ã—Å–∞–ª–¥–∞—Ä–¥—ã –∞–ª–¥—ã–º–µ–Ω –∞“ì—ã–ª—à—ã–Ω—à–∞ –±–µ—Ä—ñ–ø, –∫–µ–π—ñ–Ω –æ–ª–∞—Ä–¥—ã“£ “õ–∞–∑–∞“õ—à–∞ –∞—É–¥–∞—Ä–º–∞—Å—ã–Ω –∂–∞–∑.
        - –û“õ—É—à—ã–ª–∞—Ä –∂–∏—ñ –∂—ñ–±–µ—Ä–µ—Ç—ñ–Ω “õ–∞—Ç–µ–ª—ñ–∫—Ç–µ—Ä–≥–µ –∂–µ–∫–µ —Ç–æ“õ—Ç–∞–ª. “ö–∞—Ç–µ “õ–æ–ª–¥–∞–Ω—É–¥—ã“£ “Ø–ª–≥—ñ—Å—ñ–Ω –∫”©—Ä—Å–µ—Ç—ñ–ø, –æ–Ω—ã –¥“±—Ä—ã—Å —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä.
        - –ï–≥–µ—Ä –µ—Ä–µ–∫—à–µ –∂–∞“ì–¥–∞–π–ª–∞—Ä –Ω–µ–º–µ—Å–µ “õ–æ—Å—ã–º—à–∞ –µ—Å–∫–µ—Ä—Ç–ø–µ–ª–µ—Ä –±–æ–ª—Å–∞ ‚Äì –æ–ª–∞—Ä–¥—ã –¥–∞ “õ—ã—Å“õ–∞—à–∞ –∞—Ç–∞–ø ”©—Ç.

        –ú–∞“£—ã–∑–¥—ã:
        - –¢—ñ–∑—ñ–º–¥–µ —Ä–µ—Ç—Ç—ñ–∫ —Ç”ô—Ä—Ç—ñ–ø—Ç—ñ –∫”©—Ä—Å–µ—Ç—É “Ø—à—ñ–Ω —Ü–∏—Ñ—Ä–ª–∞—Ä–¥—ã “õ–æ–ª–¥–∞–Ω–±–∞ (–º—ã—Å–∞–ª—ã, ¬´–±—ñ—Ä—ñ–Ω—à—ñ–¥–µ–Ω¬ª, ¬´–µ–∫—ñ–Ω—à—ñ–¥–µ–Ω¬ª –¥–µ–ø —Å”©–∑–±–µ–Ω –∂–∞–∑).
        - –°”©–∑–¥–µ—Ä–¥—ñ “õ—ã—Å“õ–∞—Ä—Ç–ø–∞–π, –∞–Ω—ã“õ –∂”ô–Ω–µ —Ç–æ–ª—ã“õ –∞–π—Ç.
        - –ï—à–±—ñ—Ä —Å”©–∑–¥—ñ –Ω–µ–º–µ—Å–µ —Å”©–π–ª–µ–º–¥—ñ “õ–∞–ª–¥—ã—Ä–º–∞.
        - ”ò—Ä–±—ñ—Ä —Å”©–π–ª–µ–º–¥—ñ –Ω“Ø–∫—Ç–µ–º–µ–Ω –∞—è“õ—Ç–∞.
        - –¢—ñ–ø—Ç—ñ —Å“±—Ä–∞—É–ª—ã —Å”©–π–ª–µ–º–Ω–µ–Ω –∫–µ–π—ñ–Ω –¥–µ –Ω“Ø–∫—Ç–µ “õ–æ–π. –ú—ã—Å–∞–ª—ã: Is this your book?.
        - –ú”ô—Ç—ñ–Ω–¥—ñ –∂–∞–π –º”ô—Ç—ñ–Ω —Ç“Ø—Ä—ñ–Ω–¥–µ –∂–∞–∑, –∂“±–ª–¥—ã–∑—à–∞ (**) –Ω–µ–º–µ—Å–µ –±–∞—Å“õ–∞ –µ—Ä–µ–∫—à–µ–ª–µ—É —Ç”ô—Å—ñ–ª–¥–µ—Ä—ñ–Ω “õ–æ–ª–¥–∞–Ω–±–∞.
        - –ñ–∞—É–∞–ø “õ—ã—Å“õ–∞, –∞–Ω—ã“õ –∂”ô–Ω–µ –∞—É–¥–∏–æ“ì–∞ –æ“£–∞–π —Ç“Ø—Ä–ª–µ–Ω–µ—Ç—ñ–Ω –±–æ–ª—Å—ã–Ω.
        """
            )

        elif section == "dialogue":
            prompt = (
                f"""–°–µ–Ω –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ –º“±“ì–∞–ª—ñ–º—ñ—Å—ñ“£. –ö–µ–ª–µ—Å—ñ –¥–∏–∞–ª–æ–≥ (–ê–º–µ—Ä–∏–∫–∞–Ω–¥—ã“õ –∞“ì—ã–ª—à—ã–Ω) 12 –∂–∞—Å—Ç–∞–Ω –∞—Å“õ–∞–Ω, –¥–µ“£–≥–µ–π—ñ 0-–¥–µ–Ω B2-–≥–µ –¥–µ–π—ñ–Ω–≥—ñ “õ–∞–∑–∞“õ—Ç—ñ–ª–¥—ñ –æ“õ—É—à—ã–ª–∞—Ä“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω:

        –°–∞–±–∞“õ—Ç—ã“£ –¥–∏–∞–ª–æ–≥—ã:
        {lesson.dialogue}

        –î–∏–∞–ª–æ–≥—Ç—ã –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç—Ç–∞ –∞–π—Ç—É“ì–∞ —ã“£“ì–∞–π–ª—ã –±–æ–ª–∞—Ç—ã–Ω–¥–∞–π –µ—Ç—ñ–ø —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—ñ–ø –±–µ—Ä:

        - ”ò—Ä–±—ñ—Ä —Å”©–π–ª–µ–º–¥—ñ –±–∞—è—É –∂”ô–Ω–µ –∞–Ω—ã“õ –∞–π—Ç.
        - –°–æ–¥–∞–Ω —Å–æ“£ —Å–æ–ª —Å”©–π–ª–µ–º–Ω—ñ“£ –º–∞“ì—ã–Ω–∞—Å—ã–Ω “õ—ã—Å“õ–∞—à–∞ “õ–∞–∑–∞“õ—à–∞ –∞—É–¥–∞—Ä.
        - ”ò—Ä —Å”©–π–ª–µ–º–≥–µ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã “õ–æ—Å—ã–º—à–∞ —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç–µ–º–µ –±–µ—Ä:
            - –ï–≥–µ—Ä –µ—Ä–µ–∫—à–µ –Ω–µ–º–µ—Å–µ –º–∞“£—ã–∑–¥—ã –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞–ª—ã“õ “õ“±—Ä—ã–ª—ã–º “õ–æ–ª–¥–∞–Ω—ã–ª—Å–∞, –æ–Ω—ã “õ–∞—Ä–∞–ø–∞–π—ã–º —Å”©–∑–¥–µ—Ä–º–µ–Ω —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä.
            - –°–æ–ª —Å”©–π–ª–µ–º–¥–µ–≥—ñ –º–∞“£—ã–∑–¥—ã —Å”©–∑–¥–µ—Ä –º–µ–Ω —Ç“±—Ä–∞“õ—Ç—ã —Ç—ñ—Ä–∫–µ—Å—Ç–µ—Ä–¥—ñ“£ –º–∞“ì—ã–Ω–∞—Å—ã–Ω “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—ñ–ø ”©—Ç.

        –ú–∞“£—ã–∑–¥—ã:
        - –ú”ô—Ç—ñ–Ω–¥—ñ –¥—ã–±—ã—Å—Ç–∞—É“ì–∞ —ã“£“ì–∞–π–ª—ã –±–æ–ª—É—ã “Ø—à—ñ–Ω –Ω”©–º—ñ—Ä–ª–µ—É “Ø—à—ñ–Ω —Ü–∏—Ñ—Ä–ª–∞—Ä (1, 2, 3) “õ–æ–ª–¥–∞–Ω–±–∞. –ë“±–ª –∂–µ—Ä–¥–µ –Ω”©–º—ñ—Ä–ª–µ—É–¥—ñ“£ “õ–∞–∂–µ—Ç—ñ –∂–æ“õ.
        - –°”©–∑–¥–µ—Ä–¥—ñ “õ–∞–ª–¥—ã—Ä–º–∞–π, ”ô—Ä —Å”©–∑–¥—ñ –∞–Ω—ã“õ –∂”ô–Ω–µ —Ç–æ–ª—ã“õ –∞–π—Ç.
        - –ï—à–±—ñ—Ä —Å”©–π–ª–µ–º–¥—ñ –Ω–µ–º–µ—Å–µ —Å”©–∑–¥—ñ –Ω–∞–∑–∞—Ä–¥–∞–Ω —à—ã“ì–∞—Ä–º–∞.
        - ”ò—Ä–±—ñ—Ä —Å”©–π–ª–µ–º–¥—ñ –Ω“Ø–∫—Ç–µ–º–µ–Ω –∞—è“õ—Ç–∞.
        - –¢—ñ–ø—Ç—ñ —Å“±—Ä–∞—É–ª—ã —Å”©–π–ª–µ–º–Ω–µ–Ω –∫–µ–π—ñ–Ω –¥–µ –Ω“Ø–∫—Ç–µ “õ–æ–π. –ú—ã—Å–∞–ª—ã: Is this your book?.
        - –ú”ô—Ç—ñ–Ω–¥—ñ –∫”ô–¥—ñ–º–≥—ñ –º”ô—Ç—ñ–Ω —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –∂–∞–∑, –∂“±–ª–¥—ã–∑—à–∞–ª–∞—Ä (**) –Ω–µ–º–µ—Å–µ –±–∞—Å“õ–∞ –±”©–ª–µ–∫—Ç–µ–≥—ñ—à —Ç–∞“£–±–∞–ª–∞—Ä–¥—ã “õ–æ–ª–¥–∞–Ω–±–∞.
        - –ñ–∞—É–∞–ø “õ—ã—Å“õ–∞, –Ω–∞“õ—Ç—ã –∂”ô–Ω–µ –∞—É–¥–∏–æ“ì–∞ –∞–π–Ω–∞–ª–¥—ã—Ä—É“ì–∞ “õ–æ–ª–∞–π–ª—ã –±–æ–ª—É—ã –∫–µ—Ä–µ–∫.
        """
            )

        else:
            return JsonResponse({"error": "–ë“±—Ä—ã—Å –±”©–ª—ñ–º –∫”©—Ä—Å–µ—Ç—ñ–ª–¥—ñ."}, status=400)


        # Generate text explanation using GPT API.
        try:
            client = OpenAI(api_key=settings.OPENAI_API_KEY)
            response = client.chat.completions.create(
                model="gpt-5",
                messages=[{"role": "user", "content": prompt}],
                temperature=1,
            )
            explanation_text = response.choices[0].message.content
        except Exception as e:
            return JsonResponse({"error": f"OpenAI “õ–∞—Ç–µ—Å—ñ: {str(e)}"}, status=500)

        # Generate audio explanation.
        audio_url = None
        if explanation_text:
            media_dir = settings.MEDIA_ROOT
            # Create a unique filename by appending a short uuid string
            unique_id = uuid.uuid4().hex[:8]
            audio_filename = f"audio_lesson_{lesson.id}_{section}_{unique_id}.mp3"
            # Remove previous audio files for this lesson & section.
            pattern = os.path.join(media_dir, f"audio_lesson_{lesson.id}_{section}_*.mp3")
            for old_audio in glob.glob(pattern):
                os.remove(old_audio)
            audio_path = os.path.join(media_dir, audio_filename)
            try:
                speech_response = openai.audio.speech.create(
                    model="tts-1-hd",
                    voice="alloy",
                    input=explanation_text,
                )
                with open(audio_path, "wb") as audio_file:
                    for chunk in speech_response.iter_bytes():
                        audio_file.write(chunk)
                audio_url = f"{settings.MEDIA_URL}{audio_filename}"
            except openai.OpenAIError as e:
                return JsonResponse({"error": f"–ê—É–¥–∏–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è “õ–∞—Ç–µ—Å—ñ: {str(e)}"}, status=500)

        # –î–µ—Ä–µ–∫“õ–æ—Ä“ì–∞ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ–Ω—ñ —Å–∞“õ—Ç–∞—É (Update –Ω–µ–º–µ—Å–µ Create)
        explanation_obj, created = Explanation.objects.update_or_create(
            lesson=lesson,
            section=section,
            defaults={
                "text": explanation_text,
                "audio_url": audio_url,
            }
        )

        return JsonResponse({
            "text": explanation_text,
            "audio_url": audio_url
        })
    return JsonResponse({"error": "Invalid request method"}, status=400)


def chat_with_gpt(request, lesson_id):
    """
    AJAX endpoint for a general chat interface.
    Gathers the current lesson's data, sets a system prompt,
    and returns GPT's response as JSON.
    """
    if request.method == "POST":
        user_question = request.POST.get("question", "")

        lesson = get_object_or_404(Lesson, id=lesson_id)
        lessons_data = (
            f"Lesson {lesson.id}: {lesson.title}\n"
            f"Content: {lesson.content}\n"
            f"Vocabulary: {lesson.vocabulary}\n"
            f"Grammar: {lesson.grammar}\n"
            f"Dialogue: {lesson.dialogue}\n"
        )

        system_prompt = (
            "You are an English teacher. You have the following lesson data:\n"
            f"{lessons_data}\n"
            "–ñ–∞—É–∞–ø –±–µ—Ä–µ–¥–µ ** –º“Ø–ª–¥–µ–º “õ–æ–ª–¥–∞–Ω–±–∞."
            "Answer the user's question in detail IN KAZAKH."
        )

        try:
            client = OpenAI(api_key=settings.OPENAI_API_KEY)
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_question},
                ],
                temperature=0.7,
            )
            gpt_answer = response.choices[0].message.content
            return JsonResponse({"answer": gpt_answer})
        except Exception as e:
            return JsonResponse({"error": str(e)}, status=500)

    return JsonResponse({"error": "Invalid request method."}, status=400)


def motivational_message(request):
    """
    AJAX endpoint: Generates a motivational message about learning English.
    """
    if request.method == "POST":
        prompt = (
            "–°–µ–Ω –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω –∂–∞—Å–∞–Ω–¥—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∞—Ä“õ—ã–ª—ã “Ø–π—Ä–µ–Ω—ñ–ø –∂“Ø—Ä–≥–µ–Ω –æ“õ—É—à—ã–ª–∞—Ä“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω —à–∞–±—ã—Ç—Ç–∞–Ω–¥—ã—Ä–∞—Ç—ã–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂–∞—Å–∞. "
            "–ñ–∞—É–∞–ø—Ç—ã “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ, “õ—ã—Å“õ–∞ ”ô—Ä—ñ –Ω“±—Å“õ–∞ –µ—Ç—ñ–ø –±–µ—Ä."
        )

        try:
            client = OpenAI(api_key=settings.OPENAI_API_KEY)
            response = client.chat.completions.create(
                model="gpt-4o-mini",  # Use your preferred model.
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7,
            )
            message = response.choices[0].message.content
            return JsonResponse({"message": message})
        except Exception as e:
            return JsonResponse({"error": str(e)}, status=500)
    return JsonResponse({"error": "Invalid request method."}, status=400)


def generate_quiz_questions(lesson_id):
    """
    –°–∞–±–∞“õ—Ç—ã“£ —Å”©–∑–¥—ñ–≥—ñ–Ω–µ–Ω —Å”©–∑–¥–µ—Ä–¥—ñ –±”©–ª—ñ–ø, `QuizQuestion` –º–æ–¥–µ–ª—ñ–Ω–µ –µ–Ω–≥—ñ–∑–µ—Ç—ñ–Ω —Ñ—É–Ω–∫—Ü–∏—è.
    –ï–≥–µ—Ä —Å“±—Ä–∞“õ—Ç–∞—Ä –±“±—Ä—ã–Ω–Ω–∞–Ω –±–∞—Ä –±–æ–ª—Å–∞, –∂–∞“£–∞–ª–∞—Ä—ã–Ω “õ–æ—Å–ø–∞–π–¥—ã.
    """
    lesson = get_object_or_404(Lesson, id=lesson_id)

    # –ë–∞—Ä–ª—ã“õ –±“±—Ä—ã–Ω“ì—ã —Å“±—Ä–∞“õ—Ç–∞—Ä–¥—ã ”©—à—ñ—Ä—É (–µ—Å–∫—ñ –¥–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ —Ç–∞–∑–∞—Ä—Ç—É)
    QuizQuestion.objects.filter(lesson=lesson).delete()

    vocabulary_text = lesson.vocabulary.strip()
    lines = vocabulary_text.split("\n")

    word_list = []

    # 1. –°”©–∑–¥–µ—Ä–¥—ñ –±”©–ª—ñ–ø, —Ç—ñ–∑—ñ–º –∂–∞—Å–∞—É
    for line in lines:
        parts = line.split(" ‚Äì ")  # –°”©–∑–¥–µ—Ä " ‚Äì " –∞—Ä“õ—ã–ª—ã –±”©–ª—ñ–Ω–≥–µ–Ω
        if len(parts) == 2:
            english_word = parts[0].strip()
            kazakh_translation = parts[1].strip()
            word_list.append((english_word, kazakh_translation))

    # 2. –°”©–∑–¥–µ—Ä–¥—ñ `QuizQuestion` –º–æ–¥–µ–ª—ñ–Ω–µ –µ–Ω–≥—ñ–∑—É
    questions = [
        QuizQuestion(lesson=lesson, english_word=english_word, kazakh_translation=kazakh_translation)
        for english_word, kazakh_translation in word_list
    ]

    QuizQuestion.objects.bulk_create(questions)  # ‚úÖ –ë–∞—Ä–ª—ã“õ —Å”©–∑–¥–µ—Ä–¥—ñ –±—ñ—Ä–¥–µ–Ω –µ–Ω–≥—ñ–∑—É

    print(f"‚úÖ {len(questions)} —Å“±—Ä–∞“õ –±–∞–∑–∞“ì–∞ –µ–Ω–≥—ñ–∑—ñ–ª–¥—ñ!")


def start_quiz(request, lesson_id):
    """
    –¢–µ—Å—Ç—Ç—ñ –±–∞—Å—Ç–∞“ì–∞–Ω–¥–∞, –µ–≥–µ—Ä –±–∞–∑–∞ –±–æ—Å –±–æ–ª—Å–∞, —Å“±—Ä–∞“õ—Ç–∞—Ä–¥—ã –∞–≤—Ç–æ–º–∞—Ç—Ç—ã —Ç“Ø—Ä–¥–µ —Ç–æ–ª—Ç—ã—Ä–∞–¥—ã.
    –°–æ—Å—ã–Ω —Ç–µ—Å—Ç —Å“±—Ä–∞“õ—Ç–∞—Ä—ã–Ω “õ–∞–π—Ç–∞—Ä–∞–¥—ã.
    """
    lesson = get_object_or_404(Lesson, id=lesson_id)

    # –¢–µ—Å—Ç —Å“±—Ä–∞“õ—Ç–∞—Ä—ã–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–ª–∞—É (–µ–≥–µ—Ä ”ô–ª—ñ –µ–Ω–≥—ñ–∑—ñ–ª–º–µ—Å–µ)
    generate_quiz_questions(lesson_id)

    # –ë–∞—Ä–ª—ã“õ —Ç–µ—Å—Ç —Å“±—Ä–∞“õ—Ç–∞—Ä—ã–Ω –∞–ª—É
    questions = list(QuizQuestion.objects.filter(lesson=lesson))

    if len(questions) < 4:
        return JsonResponse({"error": "–ë“±–ª —Å–∞–±–∞“õ—Ç–∞ –∂–µ—Ç–∫—ñ–ª—ñ–∫—Ç—ñ —Å”©–∑–¥–µ—Ä –∂–æ“õ!"}, status=400)

    random.shuffle(questions)

    question_data = []

    for q in questions:
        correct_answer = q.kazakh_translation

        # ‚ùå –ë“±—Ä—ã–Ω“ì—ã –∫–æ–¥—Ç–∞ “õ–∞—Ç–µ –±–∞—Ä: –î“±—Ä—ã—Å –∂–∞—É–∞–ø –∫–µ–π–¥–µ –∂–æ“ì–∞–ª—ã–ø –∫–µ—Ç—É—ñ –º“Ø–º–∫—ñ–Ω
        incorrect_answers = [w.kazakh_translation for w in questions if w.kazakh_translation != correct_answer]

        # ‚úÖ “ö–∞—Ç–µ –∂–∞—É–∞–ø—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –¥“±—Ä—ã—Å—Ç–∞—É
        if len(incorrect_answers) < 3:
            incorrect_answers += ["“ö–∞—Ç–µ –∂–∞—É–∞–ø"] * (3 - len(incorrect_answers))

        incorrect_answers = random.sample(incorrect_answers, 3)  # –¢–µ–∫ 3 “õ–∞—Ç–µ –∂–∞—É–∞–ø —Ç–∞“£–¥–∞—É
        choices = incorrect_answers + [correct_answer]  # –î“±—Ä—ã—Å –∂–∞—É–∞–ø—Ç—ã “õ–æ—Å—É
        random.shuffle(choices)  # –ë–∞—Ä–ª—ã“ì—ã–Ω –∞—Ä–∞–ª–∞—Å—Ç—ã—Ä—É

        question_data.append({
            "id": q.id,
            "english_word": q.english_word,
            "choices": choices
        })

    return JsonResponse({"questions": question_data})


@csrf_exempt
def submit_answer(request, lesson_id):
    if request.method == "POST":
        # –°–µ—Å—Å–∏—è–Ω—ã“£ –±–∞—Ä-–∂–æ“ì—ã–Ω —Ç–µ–∫—Å–µ—Ä—ñ–ø, “õ–∞–∂–µ—Ç –±–æ–ª—Å–∞ “õ“±—Ä—É
        if not request.session.session_key:
            request.session.create()
        user_id = str(request.user.id) if request.user.is_authenticated else request.session.session_key or "guest"

        lesson = get_object_or_404(Lesson, id=lesson_id)
        attempt, created = QuizAttempt.objects.get_or_create(user_id=user_id, lesson=lesson)
        question_id = request.POST.get("question_id")
        selected_answer = request.POST.get("answer")
        question = get_object_or_404(QuizQuestion, id=question_id)

        # –°–∞–±–∞“õ“õ–∞ “õ–∞—Ç—ã—Å—Ç—ã —Ç–µ—Å—Ç—Ç–µ–≥—ñ –∂–∞–ª–ø—ã —Å“±—Ä–∞“õ—Ç–∞—Ä —Å–∞–Ω—ã
        total_questions = lesson.quiz_questions.count()

        # –î“±—Ä—ã—Å –∂–∞—É–∞–ø –±–æ–ª—Å–∞ score-–¥—ã –∞—Ä—Ç—Ç—ã—Ä—ã–ø, “õ–∞—Ç–µ –±–æ–ª—Å–∞ attempts-—Ç—ã –∞—Ä—Ç—Ç—ã—Ä–∞–º—ã–∑
        if question.kazakh_translation == selected_answer:
            attempt.add_score()
        else:
            attempt.increase_attempts()

        # –ï–≥–µ—Ä –±–∞—Ä–ª—ã“õ —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ–ª–¥—ñ –¥–µ–ø –µ—Å–µ–ø—Ç–µ—Å–µ–∫,
        # (—è“ì–Ω–∏, –¥“±—Ä—ã—Å –∂–∞—É–∞–ø—Ç–∞—Ä –º–µ–Ω “õ–∞—Ç–µ–Ω—ñ“£ “õ–æ—Å—ã–Ω–¥—ã—Å—ã >= –∂–∞–ª–ø—ã —Å“±—Ä–∞“õ —Å–∞–Ω—ã),
        # —Ç–µ—Å—Ç –∞—è“õ—Ç–∞–ª“ì–∞–Ω—ã–Ω —Ç–µ–∫—Å–µ—Ä–µ–º—ñ–∑
        if (attempt.score + attempt.attempts) >= total_questions:
            attempt.check_pass()

        # –ï–≥–µ—Ä —Ç–µ—Å—Ç ”©—Ç—ñ–ª—Å–µ, –∫–µ–ª–µ—Å—ñ —Å–∞–±–∞“õ—Ç—ã –∞—à—É “Ø—à—ñ–Ω session-–¥—ã –∂–∞“£–∞—Ä—Ç–∞–º—ã–∑
        if attempt.is_passed:
            passed_lessons = list(
                QuizAttempt.objects.filter(user_id=user_id, is_passed=True)
                .values_list("lesson_id", flat=True)
            )
            # –ï“£ “Ø–ª–∫–µ–Ω ”©—Ç–∫–µ–Ω —Å–∞–±–∞“õ –Ω”©–º—ñ—Ä—ñ–Ω–µ 1 “õ–æ—Å–∞–º—ã–∑
            next_lesson = max(passed_lessons) + 1 if passed_lessons else 1
            # –ö–µ–ª–µ—Å—ñ —Å–∞–±–∞“õ —à—ã–Ω—ã–º–µ–Ω –±–∞—Ä-–∂–æ“ì—ã–Ω —Ç–µ–∫—Å–µ—Ä–µ–º—ñ–∑
            if Lesson.objects.filter(id=next_lesson).exists():
                passed_lessons.append(next_lesson)
            request.session['passed_lessons'] = passed_lessons
            request.session.save()

            return JsonResponse({
                "correct": question.kazakh_translation == selected_answer,
                "score": attempt.score,
                "attempts": attempt.attempts,
                "passed": attempt.is_passed,
                "next_lesson": next_lesson
            })

        # –¢–µ—Å—Ç ”ô–ª—ñ –∞—è“õ—Ç–∞–ª–º–∞“ì–∞–Ω –∂–∞“ì–¥–∞–π–¥–∞ (–±–∞—Ä–ª—ã“õ —Å“±—Ä–∞“õ“õ–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ–ª–º–µ–≥–µ–Ω –∂–∞“ì–¥–∞–π–¥–∞)
        return JsonResponse({
            "correct": question.kazakh_translation == selected_answer,
            "score": attempt.score,
            "attempts": attempt.attempts,
            "passed": attempt.is_passed
        })

    return JsonResponse({"error": "Invalid request"}, status=400)


def account_locked(request):
    """
    –ê–∫–∫–∞—É–Ω—Ç “õ“±–ª—Ç–∞—É–ª—ã –±–æ–ª“ì–∞–Ω –∂–∞“ì–¥–∞–π–¥–∞ “õ–æ–ª–¥–∞–Ω—É—à—ã“ì–∞ —Ö–∞–±–∞—Ä –±–µ—Ä–µ—Ç—ñ–Ω –±–µ—Ç.
    –ï–≥–µ—Ä –ø—Ä–æ—Ñ–∏–ª—å–¥–µ lock_until –º”ô–Ω—ñ –±–æ–ª—Å–∞, “õ–∞–ª“ì–∞–Ω “õ“±–ª—Ç–∞—É —É–∞“õ—ã—Ç—ã–Ω –µ—Å–µ–ø—Ç–µ–ø –∫”©—Ä—Å–µ—Ç–µ–¥—ñ.
    """
    lock_until = None
    remaining_time = None
    if request.user.is_authenticated:
        profile = getattr(request.user, 'profile', None)
        if profile and profile.lock_until:
            lock_until = profile.lock_until
            remaining_time = (lock_until - timezone.now()).days
    context = {
        'lock_until': lock_until,
        'remaining_days': remaining_time,
    }
    return render(request, 'lessons/account_locked.html', context)


@login_required
def vocabulary_list(request):
    all_vocab_texts = Lesson.objects.values_list('vocabulary', flat=True)

    all_words_set = set()
    for vocab in all_vocab_texts:
        words = [word.strip() for word in vocab.split('\n') if word.strip()]
        all_words_set.update(words)

    sorted_words = sorted(all_words_set)
    numbered_words = list(enumerate(sorted_words, start=1))

    return render(request, 'lessons/vocabulary_list.html', {'words': numbered_words})


def register_lead(request):
    if request.method == "POST":
        name  = request.POST.get("name")
        phone = request.POST.get("phone")
        if not (name and phone):
            return JsonResponse({"error": "–ê—Ç—ã –º–µ–Ω –Ω”©–º—ñ—Ä—ñ–Ω —Ç–æ–ª—Ç—ã—Ä—ã“£—ã–∑"}, status=400)

        Lead.objects.create(name=name, phone=phone)

        lesson_url = request.build_absolute_uri(
            reverse("lesson_detail", args=[1])   # 1‚Äë—Å–∞–±–∞“õ
        )
        return JsonResponse({"redirect_url": lesson_url})

    return JsonResponse({"error": "POST –∫–µ—Ä–µ–∫"}, status=405)
